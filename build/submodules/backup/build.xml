<project name="backup">

  <target name="backup" depends="dump-local, backup-custom-modules, backup-custom-themes" />

  <target name="dump">
    <!-- TODO: This magic command should be reworked or even removed. -->
    <!-- With current settings it works just like dump-stage but I believe we use it on production. -->
    <!-- Will be changed when whole stage-production-local issue overhauled. -->
    <phingcall target="backup-database">
      <property name="link_backup" value="true" override="true" />
      <property name="show_message" value="true" override="true" />
    </phingcall>
  </target>

  <!-- The same as dump. -->
  <target name="dump-production">
    <phingcall target="backup-database">
      <property name="link_backup" value="true" override="true" />
      <property name="show_message" value="true" override="true" />
      <property name="project_url" value="${project.production_url}"  override="true" />
      <property name="restore_command" value="dbrp" override="true" />
      <property name="dump_uri" value="${env.backup.db.production_uri}" override="true" />
      <property name="dump_filename" value="${env.backup.db.production_filename}" override="true" />
    </phingcall>
  </target>

  <target name="dump-stage">
    <phingcall target="backup-database">
      <property name="link_backup" value="true" override="true" />
      <property name="show_message" value="true" override="true" />
      <property name="project_url" value="${project.stage_url}" override="true" />
      <property name="restore_command" value="dbu (or dbrs)" override="true" />
      <property name="dump_uri" value="${env.backup.db.production_uri}" override="true" />
      <property name="dump_filename" value="${env.backup.db.stage_filename}" override="true" />
    </phingcall>
  </target>

  <target name="dump-local" depends="backup-dir-init">
    <!-- <property name="env.backup.db.dir" value="${project.drupal.dir}" override="true" /> -->
    <phingcall target="backup-database">
      <property name="link_backup" value="true" override="true" />
      <property name="dump_uri" value="${env.backup.db.local_uri}" override="true" />
      <property name="dump_filename" value="${env.backup.db.local_filename}" override="true" />
    </phingcall>
  </target>

  <target name="backup-database" depends="db-backup-dir-create">
    <!-- No need to clear cache. We do not dump content of cache tables anyway. -->
    <!-- <phingcall target="cc"/> -->
    <tstamp />
    <property name="backup_name" value="${DSTAMP}-${TSTAMP}.sql" />
    <drush command="sql-dump" assume="yes">
      <option name="root">${project.drupal.dir}</option>
      <option name="uri">${project.drupal.uri}</option>
      <option name="gzip"></option>
      <option name="result-file">${env.backup.db.dir}/${backup_name}</option>
      <option name="structure-tables-key">common</option>
    </drush>
    <if>
      <or>
        <not>
          <isset property="dump_uri" />
        </not>
        <equals arg1="${dump_uri}" arg2="" />
      </or>
      <then>
        <property name="dump_uri" value="${env.backup.db.stage_uri}" override="true" />
      </then>
    </if>
    <if>
      <or>
        <not>
          <isset property="dump_filename" />
        </not>
        <equals arg1="${dump_filename}" arg2="" />
      </or>
      <then>
        <property name="dump_filename" value="${env.backup.db.stage_filename}" override="true" />
      </then>
    </if>
    <property name="dump_full_uri" value="${dump_uri}${dump_filename}" />
    <if>
      <equals arg1="${link_backup}" arg2="1" />
      <then>
        <exec command="ln -sf ${env.backup.db.dir}/${backup_name}.gz ${project.drupal.dir}${dump_full_uri}" passthru="false" />
        <exec command="ln -sf ${env.backup.db.dir}/${backup_name}.gz ${env.backup.db.dir}/${dump_filename}" passthru="false" />
        <echo msg="Symbolic link to latest database dump has been created: ${project.drupal.dir}${dump_full_uri}" />
      </then>
    </if>
    <if>
      <equals arg1="${show_message}" arg2="1" />
      <then>
        <if>
          <or>
            <not>
              <isset property="project_url" />
            </not>
            <equals arg1="${project_url}" arg2="" />
          </or>
          <then>
            <property name="project_url" value="${project.production_url}" />
          </then>
        </if>
        <if>
          <or>
            <not>
              <isset property="restore_command" />
            </not>
            <equals arg1="${restore_command}" arg2="" />
          </or>
          <then>
            <property name="restore_command" value="dbrp" />
          </then>
        </if>
        <phingcall target="slack-message">
          <property name="slack.text" value="You can download new database dump here: ${project_url}${dump_full_uri} or you just can run 'phing ${restore_command}' on you local machine." override="true" />
        </phingcall>
      </then>
    </if>
  </target>

  <target name="backup-custom-modules" depends="backup-dir-init">
    <phingcall target="delete-folder">
      <property name="folder.deletable" value="${env.backup.dir}/modules/custom" />
    </phingcall>
    <copy todir="${env.backup.dir}/modules/custom">
      <fileset dir="${project.drupal.custom.dir}">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="backup-features-modules" depends="backup-dir-init">
    <phingcall target="delete-folder">
      <property name="folder.deletable" value="${env.backup.dir}/modules/features" />
    </phingcall>
    <copy todir="${env.backup.dir}/modules/features">
      <fileset dir="${project.drupal.features.dir}">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="backup-custom-themes" depends="backup-dir-init">
    <phingcall target="delete-folder">
      <property name="folder.deletable" value="${env.backup.dir}/themes" />
    </phingcall>
    <copy todir="${env.backup.dir}/themes">
      <fileset dir="${project.drupal.theme.dir}">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="backup-project-files" depends="files-backup-dir-create">
    <tstamp />
    <property name="backup_name" value="files-${DSTAMP}-${TSTAMP}.tar.gz" />
    <property name="backup_file" value="${env.backup.files.dir}/${backup_name}" />
    <echo msg="${env.backup.files.include}" />
    <echo msg="${env.backup.files.exclude}" />
    <tar destfile="${backup_file}" compression="gzip">
      <fileset dir="${project.drupal.files.dir}" includes="${env.backup.files.include}" excludes="${env.backup.files.exclude}" />
    </tar>
    <echo msg="Creating link from ${backup_file} to ${project.drupal.dir}/files.tar.gz" />
    <exec command="ln -sf ${backup_file} ${project.drupal.dir}/files.tar.gz" passthru="false"/>
<!--    <phingcall target="slack-message">
      <property name="slack.text" value="You can download latest files archive here: ${project_url}/${backup_name} or you just can run 'phing ' on you local machine." override="true" />
    </phingcall>-->
  </target>

  <target name="backup-dir-init">
    <phingcall target="create-folder">
      <property name="folder.creatable" value="${env.backup.dir}" />
    </phingcall>
  </target>

  <target name="backup-nodes">
    <if>
      <available file="${env.backup.dir}/nodes/nodes" property="file_exists" />
      <then>
        <delete file="${env.backup.dir}/nodes/nodes" quiet="true" />
        <echo msg="Delete nodes backup file" />
      </then>
    </if>
    <drush command="node-export-export">
      <option name="root">${project.drupal.dir}</option>
      <option name="uri">${project.drupal.uri}</option>
      <param>--file=${env.backup.dir}/nodes/nodes</param>
      <param>--format=xml</param>
    </drush>
  </target>

  <target name="files-backup-dir-create">
    <phingcall target="create-folder">
      <property name="folder.creatable" value="${env.backup.files.dir}" />
    </phingcall>
  </target>


</project>
