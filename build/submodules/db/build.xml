<project name="db">

  <target name="db-create">
    <echo msg="Create project database" />
    <pdo url="${env.db.driver}:host=${env.db.host}" userId="${env.db.user.sudo}" password="${env.db.user.sudo.password}" onerror="abort">
      CREATE DATABASE `${env.db.name}`;
    </pdo>
  </target>

  <target name="db-drop">
    <echo msg="Drop project database" />
    <pdo url="${env.db.driver}:host=${env.db.host}" userId="${env.db.user.sudo}" password="${env.db.user.sudo.password}" onerror="abort">
      DROP DATABASE IF EXISTS `${env.db.name}`;
    </pdo>
  </target>

  <target name="db-restore">
    <if>
      <or>
        <not>
          <isset property="db.path_to_dump" />
        </not>
        <equals arg1="${db.path_to_dump}" arg2="" />
      </or>
      <then>
        <property name="db.path_to_dump" value="${env.backup.db.dir}/${env.backup.db.local_filename}" override="true" />
      </then>
    </if>
    <if>
      <available file="${db.path_to_dump}" />
      <then>
        <phingcall target="db-drop" />
        <phingcall target="db-create" />
        <phingcall target="redis-flush" />
        <echo msg="Restore project database from file ${db.path_to_dump}" />
        <exec command="gunzip &lt; ${db.path_to_dump} | mysql -h ${env.db.host} -u${env.db.user} -p${env.db.password} '${env.db.name}'" logoutput="true" checkreturn="true" passthru="true" />
      </then>
      <else>
        <echo msg="Dump file ${db.path_to_dump} does not exists or inaccessible." />
      </else>
    </if>
  </target>

  <!-- Short alias for db-restore. -->
  <target name="dbr" depends="db-restore" />

  <target name="db-restore-from-local" depends="db-restore" />

  <!-- Short alias for db-restore-from-local. -->
  <target name="dbrl" depends="db-restore-from-local" />

  <target name="db-restore-url" depends="db-backup-dir-create">
    <echo msg="Get database dump from remote server." />
    <if>
      <or>
        <not>
          <isset property="db.url" />
        </not>
        <equals arg1="${db.url}" arg2="" />
      </or>
      <then>
        <property name="db.url" value="${project.stage_url}${env.backup.db.stage_uri}${env.backup.db.stage_filename}" override="true" />
      </then>
    </if>
    <!-- TODO: It isn't too good to have duplicate code. But only thing we could do is to place this if somewhere at the beginning of build.xml and that's not too good either. -->
    <if>
      <or>
        <not>
          <isset property="db.path_to_dump" />
        </not>
        <equals arg1="${db.path_to_dump}" arg2="" />
      </or>
      <then>
        <property name="db.path_to_dump" value="${env.backup.db.dir}/${env.backup.db.local_filename}" override="true" />
      </then>
    </if>
    <if>
      <equals arg1="${db.url}" arg2="" />
      <then>
        <echo msg="URL is empty. Please check you settings." level="error" />
      </then>
      <else>
        <exec command="wget -O ${db.path_to_dump} ${db.url}" passthru="true" checkreturn="false" logoutput="false" returnProperty="return_code" outputProperty="return_output" />
        <if>
          <equals arg1="${return_code}" arg2="0" />
          <then>
            <echo msg="Database dump downloaded successfully." />
            <phingcall target="db-restore" />
          </then>
          <else>
            <echo msg="Cannot download database dump." level="error" />
            <echo msg="Error:" level="error" />
            <echo msg="${return_output}" level="error" />
          </else>
        </if>
      </else>
    </if>
  </target>

  <target name="db-backup-dir-create">
    <phingcall target="create-folder">
      <property name="folder.creatable" value="${env.backup.db.dir}" />
    </phingcall>
  </target>

  <!-- Short alias for db-restore-url. -->
  <target name="dbu" depends="db-restore-url" />

  <target name="db-restore-from-stage">
    <phingcall target="db-restore-url">
      <property name="db.url" value="${project.stage_url}${env.backup.db.stage_uri}${env.backup.db.stage_filename}" override="true" />
    </phingcall>
  </target>

  <!-- Short alias for db-restore-from-stage. -->
  <target name="dbrs" depends="db-restore-from-stage" />

  <target name="db-restore-from-production">
    <phingcall target="db-restore-url">
      <property name="db.url" value="${project.production_url}${env.backup.db.production_uri}${env.backup.db.production_filename}" override="true" />
    </phingcall>
  </target>

  <!-- Short alias for db-restore-from-production. -->
  <target name="dbrp" depends="db-restore-from-production" />

  <target name="db-optimize">
    <echo msg="Optimize database [${env.db.name}]." />
    <if>
      <and>
        <isset property="tables" />
        <not>
          <equals arg1="${tables}" arg2="" />
        </not>
      </and>
      <then>
        <exec command="mysql -h ${env.db.host} -u${env.db.user} -p${env.db.password} ${env.db.name} -e 'OPTIMIZE TABLE ${tables}'" logoutput="true" checkreturn="true" passthru="true" />
      </then>
      <else>
        <exec command="mysqlcheck -h ${env.db.host} -u${env.db.user} -p${env.db.password} -o ${env.db.name}" logoutput="true" checkreturn="true" passthru="true" />
      </else>
    </if>
  </target>

</project>
